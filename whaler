#!/usr/bin/env python

import argparse
import yaml
import json
import sys
import os

from collections import OrderedDict

install_dir = os.environ.get("WHALER")
if not install_dir:
    print "WHALER env must be set"
    sys.exit(1)

install_dir = os.path.expanduser(install_dir)

command_generator = {
    bool: ( lambda command, string, val: command.append(string) ),
    str: ( lambda command, string, val: command.append(string.format(val)) ),
    dict: ( lambda command, string, val: [command.append(string.format(key, value)) for key, value in val.iteritems()]),
    list: ( lambda command, string, val: [command.append(string.format(obj)) for obj in val] )
}

defaults = {
    "daemon": True,
    "tag": "latest"
}

order = OrderedDict([
    ("name", "--name {0}"),
    ("interactive", "-it"),
    ("daemon", "-d"),
    ("volumes", "-v {0}"),
    ("env", '-e "{0}={1}"'),
    ("expose", "--expose={0}"),
    ("ports", "-p={0}:{1}"),
    ("links", "--link={0}:{1}"),
    ("image", "{0}"),
    ("command", "{0}")
])

def generate_command(yaml):
    command = ["docker run"]

    for name, string in order.iteritems():
        if name not in yaml:
            continue

        typ = type(yaml[name])
        value = yaml[name]
        command_generator[typ](command, string, value)

    return " ".join(command)

def get_info(container):
    for key, val in defaults.iteritems():
        if key not in container:
            container[key] = val

    container["image"] = container["image"] + ":" + container["tag"]
    container["command"] = generate_command(container)
    return container

def get_vars(args):
    stream = file(os.path.join(args.directory, args.environment + ".yml"), "r")

    info = yaml.load(stream)
    main_container = get_info(info)

    containers = [ info["name"] ]
    services = {}
    build = []

    if "base_image" in info:
        build.append(info["base_image"])

    if "services" in info:
        for service, yml in info["services"].iteritems():
            yml["image"] = service
            service_info = get_info(yml)

            build.append(service)
            containers.append(service_info["name"])
            services[service] = service_info

    ansible_vars = {
        "main_container": main_container,
        "environment": args.environment,
        "app": args.directory,
        "hosts": args.hosts,
        "services": services,
        "containers": containers,
        "build": build,
        "working_dir": os.getcwd()
    }

    plugins = [ "git", "local_files" ]
    for plugin in plugins:
        if plugin in info:
            ansible_vars[plugin] = info[plugin]

    return ansible_vars

def deploy(args):
    args.vars = get_vars(args)
    command = 'ansible-playbook {0} -i {1} --extra-vars \'{2}\''
    deploy_playbook = os.path.join(install_dir, "whaler.yml")
    hosts_file = os.path.join(install_dir, "hosts")

    whaler_dir = args.directory
    if not os.path.exists(whaler_dir):
        print "must init whaler first"
        exit(1)

    new_command = command.format(deploy_playbook, hosts_file, json.dumps(args.vars))

    if args.debug:
        new_command += " -vvvv"
    if args.attach:
        new_command += " && docker attach " + args.vars["main_container"]["name"]
    return new_command

def initialize(args):
    files = ["common.yml", "production.yml", "development.yml", "Dockerfile"]
    if not os.path.exists(args.directory):
        os.makedirs(args.directory)
        for f in files:
            open(os.path.join(args.directory, f), "a").close()

    return False

parser = argparse.ArgumentParser(description="App to manage docker containers")
subparsers = parser.add_subparsers(help="commands")

init_parser = subparsers.add_parser("init", help="Initialize whaler dir")
init_parser.add_argument("-w", "--directory", help="Directory for whaler files", required=False, default=os.path.join(os.getcwd(), ".whaler"))
init_parser.set_defaults(func=initialize)

deploy_parser = subparsers.add_parser("deploy", help="deploy containers")
deploy_parser.add_argument("-e", "--environment", help="environment for app", required=False, default="development")
deploy_parser.add_argument("-d", "--debug", help="debug", required=False, action="store_true", default=False)
deploy_parser.add_argument("--hosts", help="host to deploy app on", required=True)
deploy_parser.add_argument("-w", "--directory", help="directory for whaler files", required=False, default=os.path.join(os.getcwd(), ".whaler"))
deploy_parser.add_argument("-a", "--attach", help="attach to docker container on local machine", action="store_true", required=False)
deploy_parser.set_defaults(func=deploy)

# TODO: Add --no-cache for building

args = parser.parse_args()
command = args.func(args)

if command:
    os.chdir(install_dir)
    os.system(command)
